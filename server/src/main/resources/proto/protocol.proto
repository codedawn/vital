syntax = "proto3";  // 指定使用 proto3 语法
option optimize_for = SPEED; // 加快解析
option java_outer_classname = "VitalPB"; // 指定类名
option java_package = "com.codedawn.vital.server.proto";

//使用message 管理其他的message
message Frame{
  Header header=1;
  Body body=2;
}

message Header{
  //用于qos的序列号
  string seq=1;
  //是否开启qos
  bool isQos=2;
  //是否携带perId,timestamp
  bool isAckExtra=3;
  //是否要桥接
  bool bridge=4;

  //空字符串代表服务器
  string fromId=5;
  //空字符串代表服务器
  string toId=6;
  //是否群发
  bool isGroup=7;

  string perId=8;
  //persistent timestamp
  int64 timestamp=9;
}
message Body{
  //用dataType 来标识传的是哪一个枚举类型
  MessageType messageType=1;

  oneof messageBody{
    AckMessage ackMessage=2;

    AuthRequestMessage authRequestMessage=3;
    AuthSuccessMessage authSuccessMessage=4;

    ExceptionMessage exceptionMessage=5;

    DisAuthMessage disAuthMessage=6;

    TextMessage textMessage=7;
    KickoutMessage kickoutMessage=8;
  }

}
//定义一个枚举类型
enum MessageType{
    AckMessageType=0;
    AuthRequestMessageType=1;
    AuthSuccessMessageType=2;
    ExceptionMessageType=3;
    DisAuthMessageType=4;
    TextMessageType=5;
    KickoutMessageType=6;
}
//一般个人消息
message TextMessage{
  string content=3;
}

//认证消息
message AuthRequestMessage{
  string token=1;
  //channel的唯一标识
  string id=2;
}
//认证成功消息
message AuthSuccessMessage{
  string ackSeq=1;
}
//操作失败消息，比如认证失败，消息发送失败
message ExceptionMessage{
  string exceptionSeq=1;
  string extra=2;
  int32 code=3;
}
//解除认证连接消息
message DisAuthMessage{
}
//ack消息
message AckMessage{
  //注意与seq区分，这是要确认的消息的qosId
  string ackSeq=1;
}

message KickoutMessage{

}