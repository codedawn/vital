syntax = "proto3";  // 指定使用 proto3 语法
option optimize_for = SPEED; // 加快解析
option java_outer_classname = "VitalProtobuf"; // 指定类名

//使用message 管理其他的message
message Protocol{
    //qos id
   string qosId=1;
    //qos
   bool qos=2;
    //是否要桥接
   bool bridge=3;
    //用dataType 来标识传的是哪一个枚举类型
   MessageType messageType=4;
    //表示每次枚举类型最多只能出现其中的一个, 节省空间
   bool ackExtra=5;

   oneof messageBody{
        TextMessage textMessage=6;
        AuthMessage authMessage=7;
        AckMessage ackMessage=8;
        AckMessageWithExtra ackMessageWithExtra=9;
        AuthSuccessMessage authSuccessMessage=10;
        ExceptionMessage exceptionMessage=11;
        DisAuthMessage disAuthMessage=12;
        DisAuthFinishMessage disAuthFinishMessage=13;
    }

}

//定义一个枚举类型
enum MessageType{
    TextMessageType=0;
    AuthMessageType=1;
    AuthSuccessMessageType=2;
    ExceptionMessageType=3;
    AckMessageType=4;
    AckMessageWithExtraType=5;
    DisAuthMessageType=6;
    DisAuthFinishMessageType=7;
    //心跳，不需要任何databody
    HeartbeatType=8;
}
//一般个人消息
message TextMessage{
    string fromId=1;
    string toId=2;
    string content=3;
    bool isGroup=4;
}

//认证消息
message AuthMessage{
    string token=1;
    string id=2;
}
//认证成功消息
message AuthSuccessMessage{
    string id=1;
}
//操作失败消息
message ExceptionMessage{
    string exceptionQosId=1;
    string extra=2;
    int32 code=3;
}
//解除认证连接消息
message DisAuthMessage{
    string id=1;
}
//完成解除认证连接消息
message DisAuthFinishMessage{
    string id=1;
}
//ack消息
message AckMessage{
    //注意与qosId区分，这是要ack的qosId
    string ackQosId=1;
}
//携带ackPerId和时间戳的ack
message AckMessageWithExtra{
    string ackQosId=1;
    //persistent id
    string ackPerId=2;
    //persistent timestamp
    int64 ackTimeStamp=3;
}
